1) Find size of variable in generic form
  #define sizeof( var) ((char *)(&var + 1) - (char *)(&var))
  
2) Inline Function vs Macro
  Macro is expanded in the preprocessor time. It is just text substituion and also macros are not type checked where as inline function does.
  Inline function replaces the function call with actual body of the function. Inline is just a request to a compiler.
  Advantage of inline function is, it does not require function call and does not return anything from the function.
  Disadvantage of inline function is, it increases file size as same function code is copied again and again in the program wherever it is called.
 
3) unnamed structure?
Anonymous or unnames structures are used in nested union or structures. Since there is no name defined directly it can be accessed.

Usage : Memory representation.
typedef struct {
    union{
        struct {uint8_t a, b, g, r;};
        uint32_t val;
    };
}Color;

4) What is the use of function pointers? array of function pointers?
Funtion Pointer :
----------------------
int fun(char a) {}

int (*fun_ptr)(char) = &fun; // Initialization
*fun_ptr(10); // Function calling
OR
int (*fun_ptr)(char) = fun; // Initialization
fun_ptr(10); // Function calling

Usage:
1) Function pointers can be useful when you want to create callback mechanism, and need to pass address of a function to another function.
2) To avoid code redundancy we use function pointers. With same input performing different functionalities.
3) Like normal pointers we can use function pointer as argument. This 

5) Difference between size of and strlen?
   Sizeof will give the sizeof of datatype and it is done at compilation time and Sizeof of will not consider the value inside the variable.
   Where as strlen is used for strings will give the value or null terminated string length of an variable.
              Eg : char arra[20] = "vinoth" - sizeof of will return 20. But strlen will return 7.

6) What is the difference between memory mapped and io mapped?
   Memory Mapped IO :
   1) Memory address space is assigned from main memory to the IO for the requested Size. Changes in the memory will directly affect the IO states.
   2) Normal read and write CPU INSTRUCTION cycles are used. 
   IO Mapped IO :
   1) IO will be mapped to the IO addresses. This state can be read or write using the registers / CPU address.
   2) IO read / IO Write instructions will be used.
   
7) How to allocate memory for double pointer?
   Double pointers ppoints to memory location of an another pointer.
          Eg : char **p = malloc((char*) * 100); // will holds memory for 100 pointers.
              char *p[0] =  malloc(); // can be done.

8) What is RISC and CISC?
   
   RISC (Reduced Instruction Set Computer)
    Main Idea behind the RISC is to reduce hardware complexity by using simpler instructions. Reduces the CPU cycle at the cost of number of instructions.
    Since there is no need for complex instruction decoding logic, more number of transistors can be used thus increases the number of registers.
    No of registers reduces the memory access time. Executes one instrution per clock cycle.
   
   CISC (Complex Instruction Set Computer)
    When working in Assembly language for programming there was need of instruction to perform multiple work. Hence CISC is introduced.
    Main Idea behing the CISC is one instrcution will do all loading, evaluating and storing operations. Reduces the number of instruction at the cost of
    CPU cycles. Takes more than one cycle to execute instructions.
    
9) What are processor architecture available?
    1) Von-Neumann
    2) Harvard
    3) CISC
    4) RISC
    5) DSP - MAC (Multiply and Accumulate) and Shifter (Arithmetic and Logical shift) units are added to the DSP cores since Signal Processing Algorithms
    heavily depend on such operations. Circular Buffers, Bit Reversal Addressing, Hardware Loops, and DAG (Digital Address Generators) are some other common 
    features of a DSP Architecture. Since Signal Processing Applications are data intensive, the data I/O bandwidth of these processors is designed to be high.
    
    Microcontroller Architectures :
    1) ARM
    2) AVR
    3) PIC
    4) 8051
    5) Power PC
    Micro Processor Architectures :
    1) X86
    2) ARM
    3) Power PC
    
    ARM : Advanced RISC machine
    Special family of instruction set architecture based on RISC architecture.
    
    AVR : 
    AVR is modified Harvard architecture 8-bit RISC single-chip microcontrollers.
    
    PIC :
    PIC Microcontroller architecture is based on Harvard architecture and supports RISC architecture
    
    Power PC :
    is a reduced instruction set computer (RISC) instruction set architecture
    
10) const volatile int *p can be used?
    Yes. Volatile indicates the program to fetch data always from memory nor from registers. Const indicates we can not change its value. 
    So incase of Hardware register which is supposed to be filled by other module can be given as const volatile in our program.

11) Macro for endian swap?
    #define Swap_endian(data)   \
    ((((data) >> 24) 0xFF) | (((data) >> 8) & 0xFF00) | \
    (((data) << 24) 0xFF000000) | (((data) << 8) & 0xFF0000))
    
12) Structure Padding and Packing ?
    By default all processor architecture mandates the data should be aligned. Because unalligned memory access is slower(ie wastage of read cycles).
    This alignment is done at the cost of memory. Eg: In 32Bit CPU, in one CPU cycle 4bytes of memory can be read. When it is not aligned in multiples of 4bytes
    an integer varibale will be stored in the 2block os 4byte aligned memory hence it woould require 2 read cycle. This leads to slower operation.
    
    Hence all structures are aligned to its address boundaries. This is called structure padding. 
    Packing explicitley intiamates the compiler to avoid / do packing for the desired value. #pragma pack.
    Note : Normally structure would padd the values to the size of an variable with max size of the datatype available in that structure.
    
13) 
    

what is pci BAR?
PCI enumuration?
Design logic for producer 1GHz and consumer 650MHz no data should be lost and no flow conttroles should be used.
what is uboot
what is device tree and can we convert dtb into dts.

How do you debug if stack memory corruption happens. depth in debugging other than debugger and print. Mostly on how stack is corrupted.
Start address of the stack pointer and how much allocated stack size for the given function.
Before main what things are done in microcontroller?
stack pointer assignment in microntroller booting?
boot process in depth of an microcontroller and linux.`

-------------------------------
MICROCONTROLLER questions
-------------------------------

1) When to choose external osc? and why?
    Very often microcontrollers internal oscilators are designed with resistor - capcitor circuit. Resistance and capacitance is prone to 
temperature, hence we may face drift in frequency when ambient changes. To avoid these kind of problems we may go for external OSC.
Crystal oscillators are more accurate and often preferred as external OSC.

    PLLs are used in microcontroller for frequency multiplication. PLL takes input from one of the OSC and produces the multiplied frequency
to operate at higher speed more than OSC frequency.

2) Edge Trigger Vs Level Trigger ?

what about QSPI?
How to determine SPI is received the trasnmitted data without ACKNOWLEDGEMNT like in I2C.
Study about SPI interrupt level and edge triggered??
SPI and I2c in Interrupt?
Why i2c suits only for short distance and spi for long? 

-----
I2C - Inter Integrated Circuit / Two Wire Interface(TWI)
-----
1) What is the use of pull up resistor in I2C and without  it can we use?
    I2C operates on open drain configuration, where the line / bus can be pulled down or released
(when released pull up resistor ensures the bus/line voltage is upto the vcc).
If I2C is push pull type of output, master can drive the bus to high when slave tries to drive 
the bus to low which leads to communication issue casuing short (vcc to ground).

    Sinking current means when the current is flowing from load to port. Sourcing current means when the current flows from port to load.
So I2C open drain port is sinking current mode.

2) I2C Arbitration?
    Since I2C is an multi master device, bus contention can happen. This bus contention is avoided using this open drain configuration.
i.e Master continously sense the bus and compares the bus data with master output data. when it mismatch master will halt the transmission.
In this configuration which master pulls line/transmit low first, will get the control of the bus.

3) Clock Stretching or Clock Synchronization?
    In I2C master will generate the clock signal. But sometimes slave may need time to process the data received from master. 
So, to make further delay i2c may pull the clock line to low on the 9th clock cycle (in ACK cycle). There is no timeout mentioned for how much
time slave can hold the clock line low. In the mean time master shall sense the clock line and wait for it to become high again.

    Clock stretching can happen when slave needs to process the data/store the data or to prepare response for the received data.

4) Advantage and Disadvantage of I2C?
    Advantage:
    -> Two wire interface.
    -> Independent addressable slave devices.
    -> Capability to handle multiple master by arbitration.
    -> ACK/NACK for transmission error handling.
    
    Disadvantage:
    -> Due to open drain topology uses more current.
    -> suitable only for short distance
    -> number of slaves are limited by the capcitance of I2C bus
    -> Half Duplex

5) Max Speed and Max number of slaves?
    I2C supports 3 speeds. 100KHz, 400KHz and 1MHz and 3.4MHz.
    For each speed standard capcitances are defined. This capacitance will change the rising and falling time of the bus. 
    Hence to meet the protocol rise and fall time standard, capcitance are defined for each speed.
    For 7bit addressing, I2C supports 128 slaves therotically. But it is limited to less numbers by capcitance on the bus.

------------    
SPI - Serial Peripheral Interface
------------
1) SPI configuration?
    SPI uses push pull configuration, hence there is no need for pull up resistors in SPI.
    
2) Why CS is active low?
    In TTL logic, when input is high, the current will flow into the IC. Normally this is very low current.
    when input is low, the current will flow from IC. Normally this is high current.
    Due to this current consuming factor, CS line is kept as active low. So when CS is active, only the active CS consumes more current.
    
3) Max Speed and Max number of slaves?
    SPI protocol does not define any top of communication speed. It can be implemented for 10 / 60Mbps for shorter range.
    If slaves are connected directly, then max number of slaves are limited to the CS pins available on the master chip.
    If it is connected by daisy chain we can go for n number of slaves but with increased time delay in transmission.

4) Advantage and Disadvantage of SPI?
    Advantage:
    -> Full Duplex
    -> No Start / Stop Bit, simpler protocol
    -> Speed is twice as fast as I2C
    -> ACK/NACK for transmission error handling.
    
    Disadvantage:
    -> Single Master
    -> No ACK for error handling
    -> Uses four wire, hence wiring becomes complex as slave count is increases.
    -> Half Duplex
