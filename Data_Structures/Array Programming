Rotate the given array by k position.
a[7] = {1,2,3,4,5,6,7,8}, n = 8, k =2;

for(i = 0; i < gcd(n, k); i++)
{
 temp = a[i];
  j = i;
  while(1)
  {
   d = ((j+k) % n);
   
   if(d == i)
    break;
    
    a[j] = a[d];
    j = d;
  }
  a[j] = temp;
}

int gcd(int a, int b)
{
 while(a!=b)
 {
   if(a > b)
    a -= b;
   else
    b -= a;
 }
 return a;
}

2) Kth Smallest element in an array? souce geekforgeeks. Understand the logic.

// This function returns k'th smallest element in arr[l..r] using
// QuickSort based method.  ASSUMPTION: ALL ELEMENTS IN ARR[] ARE DISTINCT
int kthSmallest(int arr[], int l, int r, int k)
{
    // If k is smaller than number of elements in array
    if (k > 0 && k <= r - l + 1) {
        // Partition the array around last element and get
        // position of pivot element in sorted array
        int pos = partition(arr, l, r);
 
        // If position is same as k
        if (pos - l == k - 1)
            return arr[pos];
        if (pos - l > k - 1) // If position is more, recur for left subarray
            return kthSmallest(arr, l, pos - 1, k);
 
        // Else recur for right subarray
        return kthSmallest(arr, pos + 1, r, k - pos + l - 1);
    }
 
    // If k is more than number of elements in array
    return INT_MAX;
}
 
void swap(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
 
// Standard partition process of QuickSort().  It considers the last
// element as pivot and moves all smaller element to left of it
// and greater elements to right
int partition(int arr[], int l, int r)
{
    int x = arr[r], i = l;
    for (int j = l; j <= r - 1; j++) {
        if (arr[j] <= x) {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[r]);
    return i;
}
 
// Driver program to test above methods
int main()
{
    int arr[] = { 12, 3, 5, 7, 4, 19, 26 };
    int n = sizeof(arr) / sizeof(arr[0]), k = 3;
    cout << "K'th smallest element is " << kthSmallest(arr, 0, n - 1, k);
    return 0;
}

3) Find the subarray with given sum?
int find_subarray_inedxes(int a[], int n, int sum)
{
 int cur_sum = 0, i = 0, start = 0;
 
 for(i = 0; i < n; i++)
 {
  if(cur_sum > sum)
  {
   cur_sum -= a[start];
   start++;
  }
  
  if(cur_sum == sum)
  {
   printf("print sub array index : %d - %d\r\n", cur_sum, (i-1));
  }
  
  cur_sum += a[i];
 }
 
 
}
